import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  TextInput,
  KeyboardAvoidingView,
  Platform,
  Alert,
  Modal,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { LinearGradient } from 'expo-linear-gradient';
import { COLORS, SIZES } from '../../constants';
import depositStorageService from '../../services/storage/depositStorageService';

const CreatePreOrderScreen = ({ navigation }) => {
  const [formData, setFormData] = useState({
    customerName: '',
    customerPhone: '',
    customerEmail: '',
    vehicleModel: '',
    vehicleColor: '',
    vehiclePrice: '',
    depositPercentage: '20',
    expectedArrival: '',
    notes: '',
  });

  const [errors, setErrors] = useState({});
  const [showVehicleSelector, setShowVehicleSelector] = useState(false);
  const [showColorSelector, setShowColorSelector] = useState(false);
  const [selectedVehicle, setSelectedVehicle] = useState(null);

  // Manufacturer catalog - All available models
  const manufacturerCatalog = [
    {
      id: 'MODEL_Y',
      model: 'Tesla Model Y',
      basePrice: 1250000000,
      availableColors: [
        { name: 'Tr·∫Øng Pearl', price: 1250000000 },
        { name: 'ƒêen', price: 1250000000 },
        { name: 'X√°m', price: 1250000000 },
        { name: 'Xanh Deep Blue', price: 1280000000 },
        { name: 'ƒê·ªè Multi-Coat', price: 1300000000 },
      ],
      estimatedDelivery: '1-2 th√°ng',
      description: 'SUV ƒëi·ªán 7 ch·ªó, hi·ªáu su·∫•t cao',
    },
    {
      id: 'MODEL_X',
      model: 'Tesla Model X',
      basePrice: 1800000000,
      availableColors: [
        { name: 'Tr·∫Øng Pearl', price: 1800000000 },
        { name: 'ƒêen', price: 1800000000 },
        { name: 'X√°m', price: 1800000000 },
        { name: 'Xanh Deep Blue', price: 1850000000 },
        { name: 'ƒê·ªè Multi-Coat', price: 1900000000 },
      ],
      estimatedDelivery: '2-3 th√°ng',
      description: 'SUV ƒëi·ªán cao c·∫•p, c·ª≠a c√°nh chim',
    },
    {
      id: 'MODEL_V',
      model: 'Tesla Model V',
      basePrice: 1500000000,
      availableColors: [
        { name: 'Tr·∫Øng Pearl', price: 1500000000 },
        { name: 'ƒêen', price: 1500000000 },
        { name: 'X√°m', price: 1500000000 },
        { name: 'Xanh Deep Blue', price: 1530000000 },
        { name: 'ƒê·ªè Multi-Coat', price: 1550000000 },
      ],
      estimatedDelivery: '1-3 th√°ng',
      description: 'Sedan ƒëi·ªán sang tr·ªçng',
    },
  ];

  const handleInputChange = (field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: null }));
    }
  };

  const handleSelectVehicleModel = (catalogItem) => {
    setSelectedVehicle(catalogItem);
    setFormData(prev => ({
      ...prev,
      vehicleModel: catalogItem.model,
      vehicleColor: '', // Reset color when model changes
      vehiclePrice: '', // Reset price when model changes
      expectedArrival: catalogItem.estimatedDelivery,
    }));
    setShowVehicleSelector(false);
    
    // Clear errors
    if (errors.vehicleModel) {
      setErrors(prev => ({ ...prev, vehicleModel: null }));
    }
    
    // Open color selector next
    setTimeout(() => setShowColorSelector(true), 300);
  };

  const handleSelectColor = (color) => {
    setFormData(prev => ({
      ...prev,
      vehicleColor: color.name,
      vehiclePrice: color.price.toString(),
    }));
    setShowColorSelector(false);
    
    // Clear errors
    if (errors.vehiclePrice) {
      setErrors(prev => ({ ...prev, vehiclePrice: null }));
    }
  };

  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND',
    }).format(amount);
  };

  const calculateAmounts = () => {
    const price = parseFloat(formData.vehiclePrice) || 0;
    const percentage = parseFloat(formData.depositPercentage) || 0;
    const depositAmount = (price * percentage) / 100;
    const remainingAmount = price - depositAmount;

    return {
      depositAmount,
      remainingAmount,
    };
  };

  const validateForm = () => {
    const newErrors = {};

    if (!formData.customerName.trim()) {
      newErrors.customerName = 'Vui l√≤ng nh·∫≠p t√™n kh√°ch h√†ng';
    }
    if (!formData.customerPhone.trim()) {
      newErrors.customerPhone = 'Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i';
    }
    if (!formData.vehicleModel.trim()) {
      newErrors.vehicleModel = 'Vui l√≤ng ch·ªçn xe';
    }
    if (!formData.vehiclePrice.trim()) {
      newErrors.vehiclePrice = 'Vui l√≤ng nh·∫≠p gi√° xe';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async () => {
    if (!validateForm()) {
      return;
    }

    const { depositAmount, remainingAmount } = calculateAmounts();

    Alert.alert(
      'X√°c nh·∫≠n t·∫°o pre-order',
      `Kh√°ch h√†ng: ${formData.customerName}\nXe: ${formData.vehicleModel}\nƒê·∫∑t c·ªçc: ${formatCurrency(depositAmount)}\n\nƒê∆°n h√†ng s·∫Ω ƒë∆∞·ª£c g·ª≠i ƒë·∫øn h√£ng s·∫£n xu·∫•t.`,
      [
        { text: 'H·ªßy', style: 'cancel' },
        {
          text: 'X√°c nh·∫≠n',
          onPress: async () => {
            try {
              // Calculate expected delivery date (90 days from now for pre-order)
              const expectedDeliveryDate = new Date();
              expectedDeliveryDate.setDate(expectedDeliveryDate.getDate() + 90);
              
              // Calculate final payment due date (7 days after delivery)
              const finalPaymentDueDate = new Date(expectedDeliveryDate);
              finalPaymentDueDate.setDate(finalPaymentDueDate.getDate() + 7);

              // Create deposit data
              const depositData = {
                type: 'pre_order',
                customerName: formData.customerName,
                customerPhone: formData.customerPhone,
                customerEmail: formData.customerEmail,
                vehicleModel: formData.vehicleModel,
                vehicleColor: formData.vehicleColor,
                vehiclePrice: parseFloat(formData.vehiclePrice),
                depositAmount: depositAmount,
                depositPercentage: parseFloat(formData.depositPercentage),
                remainingAmount: remainingAmount,
                status: 'pending',
                depositDate: new Date().toISOString(),
                expectedDeliveryDate: expectedDeliveryDate.toISOString(),
                finalPaymentDueDate: finalPaymentDueDate.toISOString(),
                manufacturerOrderId: null, // Manager will place order later
                manufacturerStatus: 'requested', // Requested by Dealer Staff
                estimatedArrival: formData.expectedArrival || '1-3 th√°ng',
                notes: formData.notes,
                createdBy: 'Dealer Staff',
              };

              // Save to storage
              const newDeposit = await depositStorageService.createDeposit(depositData);
              
              console.log('‚úÖ Pre-order created:', newDeposit);

              Alert.alert(
                'Th√†nh c√¥ng',
                `Pre-order ƒë√£ ƒë∆∞·ª£c t·∫°o!\n\nM√£ ƒë·∫∑t c·ªçc: ${newDeposit.id}\nTr·∫°ng th√°i: ƒê√£ g·ª≠i y√™u c·∫ßu l√™n h√£ng\nS·ªë ti·ªÅn ƒë·∫∑t c·ªçc: ${formatCurrency(depositAmount)}\n\nDealer Manager s·∫Ω ƒë·∫∑t xe t·ª´ h√£ng v√† th√¥ng b√°o khi xe v·ªÅ.`,
                [
                  {
                    text: 'OK',
                    onPress: () => navigation.goBack()
                  }
                ]
              );
            } catch (error) {
              console.error('Error creating pre-order:', error);
              Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ t·∫°o pre-order. Vui l√≤ng th·ª≠ l·∫°i.');
            }
          }
        }
      ]
    );
  };

  const { depositAmount, remainingAmount } = calculateAmounts();

  return (
    <SafeAreaView style={styles.container}>
      <KeyboardAvoidingView
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
        style={styles.keyboardView}
      >
        {/* Header */}
        <View style={styles.header}>
          <TouchableOpacity
            style={styles.backButton}
            onPress={() => navigation.goBack()}
          >
            <Text style={styles.backIcon}>‚Üê</Text>
          </TouchableOpacity>
          <View style={styles.headerTitle}>
            <Text style={styles.headerTitleText}>T·∫°o Pre-order</Text>
            <Text style={styles.headerSubtitle}>ƒê·∫∑t xe t·ª´ h√£ng</Text>
          </View>
          <View style={styles.headerSpacer} />
        </View>

        <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
          {/* Info Banner */}
          <View style={styles.infoBanner}>
            <Text style={styles.infoBannerIcon}>üì¶</Text>
            <View style={styles.infoBannerContent}>
              <Text style={styles.infoBannerTitle}>Pre-order t·ª´ h√£ng</Text>
              <Text style={styles.infoBannerText}>
                ƒê∆°n h√†ng s·∫Ω ƒë∆∞·ª£c g·ª≠i ƒë·∫øn h√£ng s·∫£n xu·∫•t. Th·ªùi gian ch·ªù d·ª± ki·∫øn: 1-3 th√°ng.
              </Text>
            </View>
          </View>

          {/* Customer Info Section */}
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>Th√¥ng tin kh√°ch h√†ng</Text>
            
            <View style={styles.inputGroup}>
              <Text style={styles.inputLabel}>T√™n kh√°ch h√†ng *</Text>
              <TextInput
                style={[styles.input, errors.customerName && styles.inputError]}
                placeholder="Nh·∫≠p t√™n kh√°ch h√†ng"
                placeholderTextColor={COLORS.TEXT.SECONDARY}
                value={formData.customerName}
                onChangeText={(value) => handleInputChange('customerName', value)}
              />
              {errors.customerName && <Text style={styles.errorText}>{errors.customerName}</Text>}
            </View>

            <View style={styles.inputGroup}>
              <Text style={styles.inputLabel}>S·ªë ƒëi·ªán tho·∫°i *</Text>
              <TextInput
                style={[styles.input, errors.customerPhone && styles.inputError]}
                placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
                placeholderTextColor={COLORS.TEXT.SECONDARY}
                value={formData.customerPhone}
                onChangeText={(value) => handleInputChange('customerPhone', value)}
                keyboardType="phone-pad"
              />
              {errors.customerPhone && <Text style={styles.errorText}>{errors.customerPhone}</Text>}
            </View>

            <View style={styles.inputGroup}>
              <Text style={styles.inputLabel}>Email</Text>
              <TextInput
                style={styles.input}
                placeholder="Nh·∫≠p email (t√πy ch·ªçn)"
                placeholderTextColor={COLORS.TEXT.SECONDARY}
                value={formData.customerEmail}
                onChangeText={(value) => handleInputChange('customerEmail', value)}
                keyboardType="email-address"
              />
            </View>
          </View>

          {/* Vehicle Info Section */}
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>Th√¥ng tin xe</Text>
            
            <View style={styles.inputGroup}>
              <Text style={styles.inputLabel}>Model xe *</Text>
              <TouchableOpacity
                style={[styles.selectInput, errors.vehicleModel && styles.inputError]}
                onPress={() => setShowVehicleSelector(true)}
              >
                <View style={styles.selectInputContent}>
                  <Text style={[styles.selectInputText, !formData.vehicleModel && styles.placeholderText]}>
                    {formData.vehicleModel || 'Ch·ªçn xe t·ª´ catalog h√£ng'}
                  </Text>
                  {selectedVehicle && (
                    <Text style={styles.selectInputSubtext}>
                      {selectedVehicle.description} ‚Ä¢ Giao h√†ng: {selectedVehicle.estimatedDelivery}
                    </Text>
                  )}
                </View>
                <Text style={styles.selectIcon}>‚Ä∫</Text>
              </TouchableOpacity>
              {errors.vehicleModel && <Text style={styles.errorText}>{errors.vehicleModel}</Text>}
            </View>

            <View style={styles.inputGroup}>
              <Text style={styles.inputLabel}>M√†u xe *</Text>
              <TouchableOpacity
                style={[styles.selectInput, !formData.vehicleModel && styles.inputDisabled]}
                onPress={() => {
                  if (!formData.vehicleModel) {
                    Alert.alert('Th√¥ng b√°o', 'Vui l√≤ng ch·ªçn model xe tr∆∞·ªõc');
                  } else {
                    setShowColorSelector(true);
                  }
                }}
                disabled={!formData.vehicleModel}
              >
                <Text style={[styles.selectInputText, !formData.vehicleColor && styles.placeholderText]}>
                  {formData.vehicleColor || 'Ch·ªçn m√†u t·ª´ catalog h√£ng'}
                </Text>
                <Text style={styles.selectIcon}>‚Ä∫</Text>
              </TouchableOpacity>
              <Text style={styles.helperText}>
                üí° Gi√° c√≥ th·ªÉ kh√°c nhau t√πy theo m√†u xe
              </Text>
            </View>

            <View style={styles.inputGroup}>
              <Text style={styles.inputLabel}>Gi√° xe *</Text>
              <TextInput
                style={[styles.input, styles.inputDisabled]}
                placeholder="Gi√° s·∫Ω t·ª± ƒë·ªông ƒëi·ªÅn khi ch·ªçn m√†u"
                placeholderTextColor={COLORS.TEXT.SECONDARY}
                value={formData.vehiclePrice ? formatCurrency(parseFloat(formData.vehiclePrice)) : ''}
                editable={false}
              />
              {errors.vehiclePrice && <Text style={styles.errorText}>{errors.vehiclePrice}</Text>}
            </View>
          </View>

          {/* Deposit Info Section */}
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>Th√¥ng tin ƒë·∫∑t c·ªçc</Text>
            
            <View style={styles.inputGroup}>
              <Text style={styles.inputLabel}>T·ª∑ l·ªá ƒë·∫∑t c·ªçc (%)</Text>
              <TextInput
                style={styles.input}
                placeholder="20"
                placeholderTextColor={COLORS.TEXT.SECONDARY}
                value={formData.depositPercentage}
                onChangeText={(value) => handleInputChange('depositPercentage', value)}
                keyboardType="numeric"
              />
              <Text style={styles.helperText}>
                üí° Th∆∞·ªùng 20-30% cho pre-order
              </Text>
            </View>

            {/* Calculation Display */}
            {formData.vehiclePrice && (
              <View style={styles.calculationCard}>
                <View style={styles.calculationRow}>
                  <Text style={styles.calculationLabel}>S·ªë ti·ªÅn ƒë·∫∑t c·ªçc:</Text>
                  <Text style={styles.calculationValueHighlight}>{formatCurrency(depositAmount)}</Text>
                </View>
                <View style={styles.calculationRow}>
                  <Text style={styles.calculationLabel}>S·ªë ti·ªÅn c√≤n l·∫°i:</Text>
                  <Text style={styles.calculationValue}>{formatCurrency(remainingAmount)}</Text>
                </View>
              </View>
            )}

            <View style={styles.inputGroup}>
              <Text style={styles.inputLabel}>Th·ªùi gian d·ª± ki·∫øn (th√°ng)</Text>
              <TextInput
                style={styles.input}
                placeholder="V√≠ d·ª•: 1-3 th√°ng"
                placeholderTextColor={COLORS.TEXT.SECONDARY}
                value={formData.expectedArrival}
                onChangeText={(value) => handleInputChange('expectedArrival', value)}
              />
              <Text style={styles.helperText}>
                ‚è±Ô∏è Th·ªùi gian t·ª´ khi ƒë·∫∑t h√†ng ƒë·∫øn khi xe v·ªÅ
              </Text>
            </View>

            <View style={styles.inputGroup}>
              <Text style={styles.inputLabel}>Ghi ch√∫</Text>
              <TextInput
                style={[styles.input, styles.textArea]}
                placeholder="Nh·∫≠p ghi ch√∫, y√™u c·∫ßu ƒë·∫∑c bi·ªát (t√πy ch·ªçn)"
                placeholderTextColor={COLORS.TEXT.SECONDARY}
                value={formData.notes}
                onChangeText={(value) => handleInputChange('notes', value)}
                multiline
                numberOfLines={3}
              />
            </View>
          </View>
        </ScrollView>

        {/* Submit Button */}
        <View style={styles.footer}>
          <TouchableOpacity
            style={styles.submitButton}
            onPress={handleSubmit}
          >
            <LinearGradient
              colors={COLORS.GRADIENT.BLUE}
              style={styles.submitButtonGradient}
            >
              <Text style={styles.submitButtonText}>T·∫°o Pre-order</Text>
            </LinearGradient>
          </TouchableOpacity>
        </View>
      </KeyboardAvoidingView>

      {/* Vehicle Model Selector Modal */}
      <Modal
        visible={showVehicleSelector}
        animationType="slide"
        transparent={true}
        onRequestClose={() => setShowVehicleSelector(false)}
      >
        <View style={styles.modalOverlay}>
          <View style={styles.vehicleSelectorModal}>
            <View style={styles.modalHeader}>
              <Text style={styles.modalTitle}>Ch·ªçn xe t·ª´ catalog h√£ng</Text>
              <TouchableOpacity
                style={styles.closeButton}
                onPress={() => setShowVehicleSelector(false)}
              >
                <Text style={styles.closeIcon}>√ó</Text>
              </TouchableOpacity>
            </View>

            <ScrollView style={styles.modalBody} showsVerticalScrollIndicator={false}>
              {manufacturerCatalog.map((catalogItem) => (
                <TouchableOpacity
                  key={catalogItem.id}
                  style={[
                    styles.catalogCard,
                    selectedVehicle?.id === catalogItem.id && styles.catalogCardSelected
                  ]}
                  onPress={() => handleSelectVehicleModel(catalogItem)}
                >
                  <View style={styles.catalogCardHeader}>
                    <View style={styles.catalogCardInfo}>
                      <Text style={styles.catalogCardModel}>{catalogItem.model}</Text>
                      <Text style={styles.catalogCardDescription}>{catalogItem.description}</Text>
                      <Text style={styles.catalogCardDelivery}>
                        ‚è±Ô∏è Giao h√†ng: {catalogItem.estimatedDelivery}
                      </Text>
                    </View>
                    <View style={styles.catalogCardRight}>
                      <Text style={styles.catalogCardPrice}>
                        {formatCurrency(catalogItem.basePrice)}
                      </Text>
                      <View style={styles.catalogBadge}>
                        <Text style={styles.catalogBadgeText}>Catalog h√£ng</Text>
                      </View>
                    </View>
                  </View>
                  {selectedVehicle?.id === catalogItem.id && (
                    <View style={styles.selectedIndicator}>
                      <Text style={styles.selectedIndicatorText}>‚úì ƒê√£ ch·ªçn</Text>
                    </View>
                  )}
                </TouchableOpacity>
              ))}
            </ScrollView>
          </View>
        </View>
      </Modal>

      {/* Color Selector Modal */}
      <Modal
        visible={showColorSelector}
        animationType="slide"
        transparent={true}
        onRequestClose={() => setShowColorSelector(false)}
      >
        <View style={styles.modalOverlay}>
          <View style={styles.colorSelectorModal}>
            <View style={styles.modalHeader}>
              <Text style={styles.modalTitle}>Ch·ªçn m√†u xe</Text>
              <TouchableOpacity
                style={styles.closeButton}
                onPress={() => setShowColorSelector(false)}
              >
                <Text style={styles.closeIcon}>√ó</Text>
              </TouchableOpacity>
            </View>

            <ScrollView style={styles.modalBody} showsVerticalScrollIndicator={false}>
              {selectedVehicle?.availableColors.map((color, index) => {
                const isSelected = formData.vehicleColor === color.name;
                const priceDiff = color.price - selectedVehicle.basePrice;
                
                return (
                  <TouchableOpacity
                    key={index}
                    style={[
                      styles.colorCard,
                      isSelected && styles.colorCardSelected
                    ]}
                    onPress={() => handleSelectColor(color)}
                  >
                    <View style={styles.colorCardContent}>
                      <Text style={styles.colorCardName}>{color.name}</Text>
                      <View style={styles.colorCardPricing}>
                        <Text style={styles.colorCardPrice}>{formatCurrency(color.price)}</Text>
                        {priceDiff > 0 && (
                          <Text style={styles.colorCardPriceDiff}>
                            +{formatCurrency(priceDiff)}
                          </Text>
                        )}
                      </View>
                    </View>
                    {isSelected && (
                      <View style={styles.colorSelectedIcon}>
                        <Text style={styles.colorSelectedIconText}>‚úì</Text>
                      </View>
                    )}
                  </TouchableOpacity>
                );
              })}
            </ScrollView>
          </View>
        </View>
      </Modal>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: COLORS.BACKGROUND.PRIMARY,
  },
  keyboardView: {
    flex: 1,
  },

  // Header
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: SIZES.PADDING.LARGE,
    paddingTop: SIZES.PADDING.MEDIUM,
    paddingBottom: SIZES.PADDING.MEDIUM,
  },
  backButton: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: 'rgba(255, 255, 255, 0.1)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  backIcon: {
    fontSize: SIZES.FONT.LARGE,
    color: COLORS.TEXT.WHITE,
    fontWeight: 'bold',
  },
  headerTitle: {
    flex: 1,
    alignItems: 'center',
  },
  headerTitleText: {
    fontSize: SIZES.FONT.LARGE,
    fontWeight: 'bold',
    color: COLORS.TEXT.WHITE,
  },
  headerSubtitle: {
    fontSize: SIZES.FONT.SMALL,
    color: COLORS.TEXT.SECONDARY,
    marginTop: 2,
  },
  headerSpacer: {
    width: 40,
  },

  // Content
  content: {
    flex: 1,
    backgroundColor: COLORS.SURFACE,
    borderTopLeftRadius: SIZES.RADIUS.XXLARGE,
    borderTopRightRadius: SIZES.RADIUS.XXLARGE,
    paddingTop: SIZES.PADDING.LARGE,
  },

  // Info Banner
  infoBanner: {
    flexDirection: 'row',
    backgroundColor: '#E3F2FD',
    marginHorizontal: SIZES.PADDING.LARGE,
    marginBottom: SIZES.PADDING.LARGE,
    padding: SIZES.PADDING.MEDIUM,
    borderRadius: SIZES.RADIUS.MEDIUM,
    borderLeftWidth: 4,
    borderLeftColor: COLORS.PRIMARY,
  },
  infoBannerIcon: {
    fontSize: 32,
    marginRight: SIZES.PADDING.SMALL,
  },
  infoBannerContent: {
    flex: 1,
  },
  infoBannerTitle: {
    fontSize: SIZES.FONT.MEDIUM,
    fontWeight: 'bold',
    color: COLORS.PRIMARY,
    marginBottom: 4,
  },
  infoBannerText: {
    fontSize: SIZES.FONT.SMALL,
    color: COLORS.TEXT.SECONDARY,
    lineHeight: 18,
  },

  // Section
  section: {
    paddingHorizontal: SIZES.PADDING.LARGE,
    marginBottom: SIZES.PADDING.LARGE,
  },
  sectionTitle: {
    fontSize: SIZES.FONT.LARGE,
    fontWeight: 'bold',
    color: COLORS.TEXT.PRIMARY,
    marginBottom: SIZES.PADDING.MEDIUM,
  },

  // Input Group
  inputGroup: {
    marginBottom: SIZES.PADDING.MEDIUM,
  },
  inputLabel: {
    fontSize: SIZES.FONT.SMALL,
    fontWeight: '600',
    color: COLORS.TEXT.PRIMARY,
    marginBottom: SIZES.PADDING.XSMALL,
  },
  input: {
    backgroundColor: '#F5F5F5',
    borderRadius: SIZES.RADIUS.MEDIUM,
    paddingHorizontal: SIZES.PADDING.MEDIUM,
    paddingVertical: SIZES.PADDING.SMALL,
    fontSize: SIZES.FONT.MEDIUM,
    color: COLORS.TEXT.PRIMARY,
    borderWidth: 1,
    borderColor: '#E0E0E0',
  },
  inputError: {
    borderColor: COLORS.ERROR,
  },
  textArea: {
    height: 80,
    textAlignVertical: 'top',
  },
  selectInput: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    backgroundColor: '#F5F5F5',
    borderRadius: SIZES.RADIUS.MEDIUM,
    paddingHorizontal: SIZES.PADDING.MEDIUM,
    paddingVertical: SIZES.PADDING.SMALL,
    borderWidth: 1,
    borderColor: '#E0E0E0',
  },
  selectInputText: {
    fontSize: SIZES.FONT.MEDIUM,
    color: COLORS.TEXT.PRIMARY,
  },
  placeholderText: {
    color: COLORS.TEXT.SECONDARY,
  },
  selectIcon: {
    fontSize: SIZES.FONT.LARGE,
    color: COLORS.TEXT.SECONDARY,
  },
  selectInputContent: {
    flex: 1,
  },
  selectInputSubtext: {
    fontSize: SIZES.FONT.XSMALL,
    color: COLORS.TEXT.SECONDARY,
    marginTop: 2,
  },
  inputDisabled: {
    backgroundColor: '#FAFAFA',
    opacity: 0.6,
  },
  errorText: {
    fontSize: SIZES.FONT.XSMALL,
    color: COLORS.ERROR,
    marginTop: SIZES.PADDING.XSMALL,
  },
  helperText: {
    fontSize: SIZES.FONT.XSMALL,
    color: COLORS.TEXT.SECONDARY,
    marginTop: SIZES.PADDING.XSMALL,
  },

  // Calculation Card
  calculationCard: {
    backgroundColor: '#F3E5F5',
    borderRadius: SIZES.RADIUS.MEDIUM,
    padding: SIZES.PADDING.MEDIUM,
    marginBottom: SIZES.PADDING.MEDIUM,
    borderLeftWidth: 4,
    borderLeftColor: COLORS.SECONDARY,
  },
  calculationRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: SIZES.PADDING.XSMALL,
  },
  calculationLabel: {
    fontSize: SIZES.FONT.SMALL,
    color: COLORS.TEXT.SECONDARY,
    fontWeight: '500',
  },
  calculationValue: {
    fontSize: SIZES.FONT.MEDIUM,
    color: COLORS.TEXT.PRIMARY,
    fontWeight: '600',
  },
  calculationValueHighlight: {
    fontSize: SIZES.FONT.LARGE,
    color: COLORS.SECONDARY,
    fontWeight: 'bold',
  },

  // Footer
  footer: {
    padding: SIZES.PADDING.LARGE,
    paddingBottom: SIZES.PADDING.XXXLARGE,
    backgroundColor: COLORS.SURFACE,
    borderTopWidth: 1,
    borderTopColor: '#E9ECEF',
  },
  submitButton: {
    borderRadius: SIZES.RADIUS.MEDIUM,
    overflow: 'hidden',
  },
  submitButtonGradient: {
    paddingVertical: SIZES.PADDING.MEDIUM,
    alignItems: 'center',
  },
  submitButtonText: {
    fontSize: SIZES.FONT.MEDIUM,
    color: COLORS.TEXT.WHITE,
    fontWeight: 'bold',
  },

  // Modals
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'flex-end',
  },
  vehicleSelectorModal: {
    backgroundColor: COLORS.SURFACE,
    borderTopLeftRadius: SIZES.RADIUS.XXLARGE,
    borderTopRightRadius: SIZES.RADIUS.XXLARGE,
    maxHeight: '80%',
  },
  colorSelectorModal: {
    backgroundColor: COLORS.SURFACE,
    borderTopLeftRadius: SIZES.RADIUS.XXLARGE,
    borderTopRightRadius: SIZES.RADIUS.XXLARGE,
    maxHeight: '70%',
  },
  modalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: SIZES.PADDING.LARGE,
    borderBottomWidth: 1,
    borderBottomColor: '#E9ECEF',
  },
  modalTitle: {
    fontSize: SIZES.FONT.LARGE,
    fontWeight: 'bold',
    color: COLORS.TEXT.PRIMARY,
  },
  closeButton: {
    width: 32,
    height: 32,
    borderRadius: 16,
    backgroundColor: 'rgba(0, 0, 0, 0.05)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  closeIcon: {
    fontSize: 28,
    color: COLORS.TEXT.SECONDARY,
    fontWeight: '300',
  },
  modalBody: {
    padding: SIZES.PADDING.LARGE,
  },

  // Catalog Card
  catalogCard: {
    backgroundColor: COLORS.SURFACE,
    borderRadius: SIZES.RADIUS.MEDIUM,
    padding: SIZES.PADDING.MEDIUM,
    marginBottom: SIZES.PADDING.MEDIUM,
    borderWidth: 1,
    borderColor: '#E9ECEF',
  },
  catalogCardSelected: {
    borderColor: COLORS.SECONDARY,
    borderWidth: 2,
    backgroundColor: '#F3E5F5',
  },
  catalogCardHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
  },
  catalogCardInfo: {
    flex: 1,
  },
  catalogCardModel: {
    fontSize: SIZES.FONT.MEDIUM,
    fontWeight: 'bold',
    color: COLORS.TEXT.PRIMARY,
    marginBottom: 4,
  },
  catalogCardDescription: {
    fontSize: SIZES.FONT.SMALL,
    color: COLORS.TEXT.SECONDARY,
    marginBottom: 4,
  },
  catalogCardDelivery: {
    fontSize: SIZES.FONT.XSMALL,
    color: COLORS.TEXT.SECONDARY,
  },
  catalogCardRight: {
    alignItems: 'flex-end',
  },
  catalogCardPrice: {
    fontSize: SIZES.FONT.MEDIUM,
    fontWeight: 'bold',
    color: COLORS.SECONDARY,
    marginBottom: 6,
  },
  catalogBadge: {
    backgroundColor: COLORS.SECONDARY,
    paddingHorizontal: 8,
    paddingVertical: 2,
    borderRadius: SIZES.RADIUS.SMALL,
  },
  catalogBadgeText: {
    fontSize: SIZES.FONT.XSMALL,
    color: COLORS.TEXT.WHITE,
    fontWeight: '600',
  },
  selectedIndicator: {
    marginTop: SIZES.PADDING.SMALL,
    paddingTop: SIZES.PADDING.SMALL,
    borderTopWidth: 1,
    borderTopColor: '#E9ECEF',
    alignItems: 'center',
  },
  selectedIndicatorText: {
    fontSize: SIZES.FONT.SMALL,
    color: COLORS.SECONDARY,
    fontWeight: '600',
  },

  // Color Card
  colorCard: {
    backgroundColor: COLORS.SURFACE,
    borderRadius: SIZES.RADIUS.MEDIUM,
    padding: SIZES.PADDING.MEDIUM,
    marginBottom: SIZES.PADDING.MEDIUM,
    borderWidth: 1,
    borderColor: '#E9ECEF',
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  colorCardSelected: {
    borderColor: COLORS.SECONDARY,
    borderWidth: 2,
    backgroundColor: '#F3E5F5',
  },
  colorCardContent: {
    flex: 1,
  },
  colorCardName: {
    fontSize: SIZES.FONT.MEDIUM,
    fontWeight: 'bold',
    color: COLORS.TEXT.PRIMARY,
    marginBottom: 4,
  },
  colorCardPricing: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  colorCardPrice: {
    fontSize: SIZES.FONT.SMALL,
    color: COLORS.TEXT.PRIMARY,
    fontWeight: '600',
  },
  colorCardPriceDiff: {
    fontSize: SIZES.FONT.XSMALL,
    color: '#FF6B6B',
    marginLeft: 8,
    fontWeight: '600',
  },
  colorSelectedIcon: {
    width: 32,
    height: 32,
    borderRadius: 16,
    backgroundColor: COLORS.SECONDARY,
    justifyContent: 'center',
    alignItems: 'center',
  },
  colorSelectedIconText: {
    fontSize: SIZES.FONT.MEDIUM,
    color: COLORS.TEXT.WHITE,
    fontWeight: 'bold',
  },
});

export default CreatePreOrderScreen;
